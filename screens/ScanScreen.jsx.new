import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
  Alert,
  FlatList,
  ActivityIndicator,
  Modal,
} from "react-native";
import Entypo from "@expo/vector-icons/Entypo";
import Ionicons from "@expo/vector-icons/Ionicons";
import * as ImagePicker from "expo-image-picker";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native";
import Header from "../layouts/Header";
import Colors from "../utils/Colors";
import axios from "axios";

// Replace with your backend URL
const BACKEND_URL = "http://192.168.1.2:8001";

export default function ScanScreen() {
  const navigation = useNavigation();
  const [photo, setPhoto] = useState(null);
  const [isUploaded, setIsUploaded] = useState(false);
  const [inventory, setInventory] = useState(null);
  const [loadingInventory, setLoadingInventory] = useState(false);
  const [savedToInventory, setSavedToInventory] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState('Initializing...');

  useEffect(() => {
    // Request necessary permissions on component mount
    (async () => {
      const cameraStatus = await ImagePicker.requestCameraPermissionsAsync();
      const mediaLibraryStatus =
        await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (
        cameraStatus.status !== "granted" ||
        mediaLibraryStatus.status !== "granted"
      ) {
        Alert.alert(
          "Permission required",
          "Camera and Media Library permissions are needed to scan products."
        );
      }
    })();
  }, []);

  // Function to pick an image from the device's gallery
  const pickImageFromGallery = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 0.7,
    });

    if (!result.canceled && result.assets?.[0]?.uri) {
      const image = result.assets[0];
      setPhoto(image);
      setIsUploaded(false);
      setInventory(null);
      uploadToBackend(image);
    }
  };

  // Function to capture an image using the device's camera
  const captureImageWithCamera = async () => {
    const result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 0.7,
    });

    if (!result.canceled && result.assets?.[0]?.uri) {
      const image = result.assets[0];
      setPhoto(image);
      setIsUploaded(false);
      setInventory(null);
      uploadToBackend(image);
    }
  };

  // Function to upload the selected/captured image to the backend
  const uploadToBackend = async (image) => {
    const data = new FormData();
    data.append("file", {
      uri: image.uri,
      type: "image/jpeg",
      name: `photo_${Date.now()}.jpg`,
    });

    try {
      setLoadingInventory(true);
      setLoadingProgress('Uploading image...');
      setSavedToInventory(false);

      console.log(`Attempting to upload image to: ${BACKEND_URL}/process_image`);

      // Upload the image to the backend
      setLoadingProgress('Processing image...');
      const backendRes = await axios.post(
        `${BACKEND_URL}/process_image`,
        data,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
          timeout: 45000, // 45 seconds timeout
        }
      );

      setLoadingProgress('Extracting data...');
      
      // Process the response
      if (backendRes.data?.inventory && Array.isArray(backendRes.data.inventory) && backendRes.data.inventory.length > 0) {
        setInventory(backendRes.data.inventory);
        Alert.alert("Success", "Inventory items extracted successfully");
      } else {
        setInventory([]);
        Alert.alert("No items detected", "Could not detect any inventory items from the image.");
      }
      
      setLoadingInventory(false);
      setIsUploaded(true);
      
    } catch (err) {
      console.error("Error uploading image:", err);
      setLoadingInventory(false);

      let errorMessage = "Could not process the image. Please try again.";
      if (err.response) {
        errorMessage = `Backend Error: ${err.response.status} - ${err.response.data?.detail || err.response.data || err.message}`;
      } else if (err.request) {
        errorMessage = "Network Error: Could not connect to the backend server.";
      } else {
        errorMessage = `Request Error: ${err.message}`;
      }

      Alert.alert("Upload Failed", errorMessage);
      setInventory(null);
    }
  };

  // Function to save the extracted inventory items to AsyncStorage
  const saveToInventory = async () => {
    if (!inventory || inventory.length === 0) {
      Alert.alert("No Data", "No inventory items to save.");
      return;
    }

    try {
      // Get existing inventory data
      const existingData = await AsyncStorage.getItem("inventory");
      let inventoryData = [];

      if (existingData) {
        inventoryData = JSON.parse(existingData);
      }

      // Add new items to inventory
      const updatedInventory = [...inventoryData, ...inventory];

      // Save updated inventory back to AsyncStorage
      await AsyncStorage.setItem("inventory", JSON.stringify(updatedInventory));

      // Update state to indicate items have been saved
      setSavedToInventory(true);
      Alert.alert("Success", "Items added to inventory successfully");

      // Navigate to inventory screen after saving
      navigation.navigate("Inventory");
    } catch (err) {
      console.error("Failed to save inventory:", err);
      Alert.alert("Error", "Failed to save inventory items. Please try again.");
    }
  };

  // Render function for each item in the extracted inventory list
  const renderInventoryItem = ({ item }) => (
    <View style={styles.inventoryItem}>
      <Text style={styles.inventoryText}>Item: {item.item || "Unknown"}</Text>
      <Text style={styles.inventoryText}>Quantity: {item.quantity || 1}</Text>
      {item.weight && (
        <Text style={styles.inventoryText}>Weight: {item.weight}</Text>
      )}
      <Text style={styles.inventoryText}>
        Purchase Date: {item.purchase_date || "Unknown"}
      </Text>
      {item.expiry_date && (
        <Text style={styles.inventoryText}>Expiry Date: {item.expiry_date}</Text>
      )}
    </View>
  );

  // Main content based on state
  const renderMainContent = () => {
    if (!photo && !inventory) {
      // Show instructions if no photo or inventory
      return (
        <View style={styles.instructionsContainer}>
          <Text style={styles.instructionTitle}>
            How to Scan Your Products
          </Text>

          <View style={styles.instructionItem}>
            <Ionicons name="camera" size={24} color={Colors.secondary} />
            <View style={styles.instructionTextContainer}>
              <Text style={styles.instructionPointTitle}>
                Capture or Select an Image
              </Text>
              <Text style={styles.instructionPoint}>
                Take a photo of your product or select one from your gallery.
              </Text>
            </View>
          </View>

          <View style={styles.instructionItem}>
            <Ionicons name="document-text" size={24} color={Colors.secondary} />
            <View style={styles.instructionTextContainer}>
              <Text style={styles.instructionPointTitle}>
                Ensure Clarity
              </Text>
              <Text style={styles.instructionPoint}>
                Make sure the product details, including expiry date, are clearly
                visible in the image.
              </Text>
            </View>
          </View>

          <View style={styles.instructionItem}>
            <Ionicons name="list" size={24} color={Colors.secondary} />
            <View style={styles.instructionTextContainer}>
              <Text style={styles.instructionPointTitle}>
                Review and Save
              </Text>
              <Text style={styles.instructionPoint}>
                Review the extracted information and save it to your inventory.
              </Text>
            </View>
          </View>
        </View>
      );
    } else if (inventory) {
      // Show inventory items if available
      return (
        <View style={styles.inventoryContainer}>
          <Text style={styles.inventoryTitle}>
            Extracted Inventory Items
          </Text>
          {inventory.length > 0 ? (
            <>
              {inventory.map((item, index) => renderInventoryItem({ item, index }))}
              {!savedToInventory && (
                <TouchableOpacity
                  style={styles.saveButton}
                  onPress={saveToInventory}
                  disabled={loadingInventory}
                >
                  <Text style={styles.saveButtonText}>Add to Inventory</Text>
                </TouchableOpacity>
              )}
            </>
          ) : (
            <Text style={styles.noInventoryText}>
              No inventory items were extracted.
            </Text>
          )}
        </View>
      );
    }
    
    // Default empty view
    return null;
  };

  return (
    <View style={styles.container}>
      <Header />
      
      {/* Loading Modal */}
      <Modal
        transparent={true}
        animationType="fade"
        visible={loadingInventory}
        onRequestClose={() => {}}
      >
        <View style={styles.loadingOverlay}>
          <View style={styles.loadingCard}>
            <ActivityIndicator size="large" color={Colors.secondary} />
            <Text style={styles.loadingTextMain}>{loadingProgress}</Text>
            <Text style={styles.loadingTextSub}>Please wait while we process your image</Text>
          </View>
        </View>
      </Modal>

      {/* Main Content */}
      <View style={styles.content}>
        {renderMainContent()}
      </View>

      {/* Bottom Camera Buttons */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.button} onPress={captureImageWithCamera}>
          <Entypo name="camera" size={24} color={Colors.LightGray || '#ffffff'} />
        </TouchableOpacity>
        <Text style={styles.line}>|</Text>
        <TouchableOpacity style={styles.button} onPress={pickImageFromGallery}>
          <Entypo name="images" size={24} color={Colors.LightGray || '#ffffff'} />
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  content: {
    flex: 1,
    paddingTop: 80,
    paddingHorizontal: 15,
  },
  inventoryContainer: {
    paddingBottom: 100,
  },
  // Loading overlay styles
  loadingOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingCard: {
    backgroundColor: Colors.background,
    borderRadius: 16,
    padding: 24,
    width: '80%',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10,
  },
  loadingTextMain: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.primary,
    marginTop: 16,
    textAlign: 'center',
  },
  loadingTextSub: {
    fontSize: 14,
    color: Colors.text,
    marginTop: 8,
    textAlign: 'center',
  },
  buttonContainer: {
    position: "absolute",
    bottom: 20,
    left: "50%",
    transform: [{ translateX: -90 }],
    width: 180,
    flexDirection: "row",
    justifyContent: "space-around",
    alignItems: "center",
    backgroundColor: "#131417",
    paddingVertical: 12,
    borderRadius: 50,
    elevation: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 5 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
  },
  button: {
    paddingHorizontal: 15,
  },
  line: {
    color: Colors.primary,
    fontSize: 24,
    fontWeight: "200",
  },
  instructionsContainer: {
    padding: 20,
    marginVertical: 15,
    backgroundColor: Colors.cardBackground || '#1E2030',
    borderRadius: 8,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  instructionTitle: {
    fontSize: 22,
    fontWeight: "bold",
    color: Colors.secondary,
    marginBottom: 30,
    textAlign: "center",
  },
  instructionItem: {
    flexDirection: "row",
    alignItems: "flex-start",
    marginBottom: 15,
  },
  instructionTextContainer: {
    flex: 1,
    marginLeft: 15,
  },
  instructionPointTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: Colors.secondary,
    marginBottom: 5,
  },
  instructionPoint: {
    fontSize: 14,
    color: Colors.text,
    lineHeight: 20,
  },
  inventoryTitle: {
    fontSize: 20,
    fontWeight: "700",
    color: Colors.secondary,
    marginVertical: 15,
    textAlign: "center",
  },
  inventoryItem: {
    backgroundColor: Colors.cardBackground || '#1E2030',
    padding: 15,
    marginVertical: 6,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: Colors.borderColor || '#2A2D3E',
  },
  inventoryText: {
    color: Colors.text,
    fontSize: 14,
    marginBottom: 4,
  },
  saveButton: {
    backgroundColor: Colors.secondary,
    paddingVertical: 14,
    paddingHorizontal: 25,
    borderRadius: 8,
    alignItems: 'center',
    marginVertical: 20,
    alignSelf: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 8,
  },
  saveButtonText: {
    color: Colors.background,
    fontSize: 18,
    fontWeight: 'bold',
  },
  noInventoryText: {
    textAlign: 'center',
    color: Colors.text,
    fontSize: 16,
    marginTop: 20,
  }
});
